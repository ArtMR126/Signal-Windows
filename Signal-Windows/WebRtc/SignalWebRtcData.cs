// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WebRtcData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Signal_Windows.SignalWebRtc {

  /// <summary>Holder for reflection information generated from WebRtcData.proto</summary>
  public static partial class WebRtcDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WebRtcData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WebRtcDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBXZWJSdGNEYXRhLnByb3RvEgp0ZXh0c2VjdXJlIiUKCUNvbm5lY3RlZBIM",
            "CgJpZBgBIAEoBEgAQgoKCGlkX29uZW9mIiIKBkhhbmd1cBIMCgJpZBgBIAEo",
            "BEgAQgoKCGlkX29uZW9mIlQKFFZpZGVvU3RyZWFtaW5nU3RhdHVzEgwKAmlk",
            "GAEgASgESAASEQoHZW5hYmxlZBgCIAEoCEgBQgoKCGlkX29uZW9mQg8KDWVu",
            "YWJsZWRfb25lb2Yi2wEKBERhdGESKgoJY29ubmVjdGVkGAEgASgLMhUudGV4",
            "dHNlY3VyZS5Db25uZWN0ZWRIABIkCgZoYW5ndXAYAiABKAsyEi50ZXh0c2Vj",
            "dXJlLkhhbmd1cEgBEkAKFHZpZGVvU3RyZWFtaW5nU3RhdHVzGAMgASgLMiAu",
            "dGV4dHNlY3VyZS5WaWRlb1N0cmVhbWluZ1N0YXR1c0gCQhEKD2Nvbm5lY3Rl",
            "ZF9vbmVvZkIOCgxoYW5ndXBfb25lb2ZCHAoadmlkZW9TdHJlYW1pbmdTdGF0",
            "dXNfb25lb2ZCUwohb3JnLnRob3VnaHRjcmltZS5zZWN1cmVzbXMud2VicnRj",
            "QhBXZWJSdGNEYXRhUHJvdG9zqgIbU2lnbmFsX1dpbmRvd3MuU2lnbmFsV2Vi",
            "UnRjYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Signal_Windows.SignalWebRtc.Connected), global::Signal_Windows.SignalWebRtc.Connected.Parser, new[]{ "Id" }, new[]{ "IdOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Signal_Windows.SignalWebRtc.Hangup), global::Signal_Windows.SignalWebRtc.Hangup.Parser, new[]{ "Id" }, new[]{ "IdOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Signal_Windows.SignalWebRtc.VideoStreamingStatus), global::Signal_Windows.SignalWebRtc.VideoStreamingStatus.Parser, new[]{ "Id", "Enabled" }, new[]{ "IdOneof", "EnabledOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Signal_Windows.SignalWebRtc.Data), global::Signal_Windows.SignalWebRtc.Data.Parser, new[]{ "Connected", "Hangup", "VideoStreamingStatus" }, new[]{ "ConnectedOneof", "HangupOneof", "VideoStreamingStatusOneof" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Connected : pb::IMessage<Connected> {
    private static readonly pb::MessageParser<Connected> _parser = new pb::MessageParser<Connected>(() => new Connected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Connected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Signal_Windows.SignalWebRtc.WebRtcDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connected(Connected other) : this() {
      switch (other.IdOneofCase) {
        case IdOneofOneofCase.Id:
          Id = other.Id;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connected Clone() {
      return new Connected(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return idOneofCase_ == IdOneofOneofCase.Id ? (ulong) idOneof_ : 0UL; }
      set {
        idOneof_ = value;
        idOneofCase_ = IdOneofOneofCase.Id;
      }
    }

    private object idOneof_;
    /// <summary>Enum of possible cases for the "id_oneof" oneof.</summary>
    public enum IdOneofOneofCase {
      None = 0,
      Id = 1,
    }
    private IdOneofOneofCase idOneofCase_ = IdOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofOneofCase IdOneofCase {
      get { return idOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdOneof() {
      idOneofCase_ = IdOneofOneofCase.None;
      idOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Connected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Connected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IdOneofCase != other.IdOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idOneofCase_ == IdOneofOneofCase.Id) hash ^= Id.GetHashCode();
      hash ^= (int) idOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idOneofCase_ == IdOneofOneofCase.Id) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idOneofCase_ == IdOneofOneofCase.Id) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Connected other) {
      if (other == null) {
        return;
      }
      switch (other.IdOneofCase) {
        case IdOneofOneofCase.Id:
          Id = other.Id;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hangup : pb::IMessage<Hangup> {
    private static readonly pb::MessageParser<Hangup> _parser = new pb::MessageParser<Hangup>(() => new Hangup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hangup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Signal_Windows.SignalWebRtc.WebRtcDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hangup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hangup(Hangup other) : this() {
      switch (other.IdOneofCase) {
        case IdOneofOneofCase.Id:
          Id = other.Id;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hangup Clone() {
      return new Hangup(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return idOneofCase_ == IdOneofOneofCase.Id ? (ulong) idOneof_ : 0UL; }
      set {
        idOneof_ = value;
        idOneofCase_ = IdOneofOneofCase.Id;
      }
    }

    private object idOneof_;
    /// <summary>Enum of possible cases for the "id_oneof" oneof.</summary>
    public enum IdOneofOneofCase {
      None = 0,
      Id = 1,
    }
    private IdOneofOneofCase idOneofCase_ = IdOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofOneofCase IdOneofCase {
      get { return idOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdOneof() {
      idOneofCase_ = IdOneofOneofCase.None;
      idOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hangup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hangup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IdOneofCase != other.IdOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idOneofCase_ == IdOneofOneofCase.Id) hash ^= Id.GetHashCode();
      hash ^= (int) idOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idOneofCase_ == IdOneofOneofCase.Id) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idOneofCase_ == IdOneofOneofCase.Id) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hangup other) {
      if (other == null) {
        return;
      }
      switch (other.IdOneofCase) {
        case IdOneofOneofCase.Id:
          Id = other.Id;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VideoStreamingStatus : pb::IMessage<VideoStreamingStatus> {
    private static readonly pb::MessageParser<VideoStreamingStatus> _parser = new pb::MessageParser<VideoStreamingStatus>(() => new VideoStreamingStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoStreamingStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Signal_Windows.SignalWebRtc.WebRtcDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoStreamingStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoStreamingStatus(VideoStreamingStatus other) : this() {
      switch (other.IdOneofCase) {
        case IdOneofOneofCase.Id:
          Id = other.Id;
          break;
      }

      switch (other.EnabledOneofCase) {
        case EnabledOneofOneofCase.Enabled:
          Enabled = other.Enabled;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoStreamingStatus Clone() {
      return new VideoStreamingStatus(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return idOneofCase_ == IdOneofOneofCase.Id ? (ulong) idOneof_ : 0UL; }
      set {
        idOneof_ = value;
        idOneofCase_ = IdOneofOneofCase.Id;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabledOneofCase_ == EnabledOneofOneofCase.Enabled ? (bool) enabledOneof_ : false; }
      set {
        enabledOneof_ = value;
        enabledOneofCase_ = EnabledOneofOneofCase.Enabled;
      }
    }

    private object idOneof_;
    /// <summary>Enum of possible cases for the "id_oneof" oneof.</summary>
    public enum IdOneofOneofCase {
      None = 0,
      Id = 1,
    }
    private IdOneofOneofCase idOneofCase_ = IdOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofOneofCase IdOneofCase {
      get { return idOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdOneof() {
      idOneofCase_ = IdOneofOneofCase.None;
      idOneof_ = null;
    }

    private object enabledOneof_;
    /// <summary>Enum of possible cases for the "enabled_oneof" oneof.</summary>
    public enum EnabledOneofOneofCase {
      None = 0,
      Enabled = 2,
    }
    private EnabledOneofOneofCase enabledOneofCase_ = EnabledOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnabledOneofOneofCase EnabledOneofCase {
      get { return enabledOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnabledOneof() {
      enabledOneofCase_ = EnabledOneofOneofCase.None;
      enabledOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoStreamingStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoStreamingStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Enabled != other.Enabled) return false;
      if (IdOneofCase != other.IdOneofCase) return false;
      if (EnabledOneofCase != other.EnabledOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idOneofCase_ == IdOneofOneofCase.Id) hash ^= Id.GetHashCode();
      if (enabledOneofCase_ == EnabledOneofOneofCase.Enabled) hash ^= Enabled.GetHashCode();
      hash ^= (int) idOneofCase_;
      hash ^= (int) enabledOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idOneofCase_ == IdOneofOneofCase.Id) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (enabledOneofCase_ == EnabledOneofOneofCase.Enabled) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idOneofCase_ == IdOneofOneofCase.Id) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (enabledOneofCase_ == EnabledOneofOneofCase.Enabled) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoStreamingStatus other) {
      if (other == null) {
        return;
      }
      switch (other.IdOneofCase) {
        case IdOneofOneofCase.Id:
          Id = other.Id;
          break;
      }

      switch (other.EnabledOneofCase) {
        case EnabledOneofOneofCase.Enabled:
          Enabled = other.Enabled;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Data : pb::IMessage<Data> {
    private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Signal_Windows.SignalWebRtc.WebRtcDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data(Data other) : this() {
      switch (other.ConnectedOneofCase) {
        case ConnectedOneofOneofCase.Connected:
          Connected = other.Connected.Clone();
          break;
      }

      switch (other.HangupOneofCase) {
        case HangupOneofOneofCase.Hangup:
          Hangup = other.Hangup.Clone();
          break;
      }

      switch (other.VideoStreamingStatusOneofCase) {
        case VideoStreamingStatusOneofOneofCase.VideoStreamingStatus:
          VideoStreamingStatus = other.VideoStreamingStatus.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data Clone() {
      return new Data(this);
    }

    /// <summary>Field number for the "connected" field.</summary>
    public const int ConnectedFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Signal_Windows.SignalWebRtc.Connected Connected {
      get { return connectedOneofCase_ == ConnectedOneofOneofCase.Connected ? (global::Signal_Windows.SignalWebRtc.Connected) connectedOneof_ : null; }
      set {
        connectedOneof_ = value;
        connectedOneofCase_ = value == null ? ConnectedOneofOneofCase.None : ConnectedOneofOneofCase.Connected;
      }
    }

    /// <summary>Field number for the "hangup" field.</summary>
    public const int HangupFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Signal_Windows.SignalWebRtc.Hangup Hangup {
      get { return hangupOneofCase_ == HangupOneofOneofCase.Hangup ? (global::Signal_Windows.SignalWebRtc.Hangup) hangupOneof_ : null; }
      set {
        hangupOneof_ = value;
        hangupOneofCase_ = value == null ? HangupOneofOneofCase.None : HangupOneofOneofCase.Hangup;
      }
    }

    /// <summary>Field number for the "videoStreamingStatus" field.</summary>
    public const int VideoStreamingStatusFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Signal_Windows.SignalWebRtc.VideoStreamingStatus VideoStreamingStatus {
      get { return videoStreamingStatusOneofCase_ == VideoStreamingStatusOneofOneofCase.VideoStreamingStatus ? (global::Signal_Windows.SignalWebRtc.VideoStreamingStatus) videoStreamingStatusOneof_ : null; }
      set {
        videoStreamingStatusOneof_ = value;
        videoStreamingStatusOneofCase_ = value == null ? VideoStreamingStatusOneofOneofCase.None : VideoStreamingStatusOneofOneofCase.VideoStreamingStatus;
      }
    }

    private object connectedOneof_;
    /// <summary>Enum of possible cases for the "connected_oneof" oneof.</summary>
    public enum ConnectedOneofOneofCase {
      None = 0,
      Connected = 1,
    }
    private ConnectedOneofOneofCase connectedOneofCase_ = ConnectedOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectedOneofOneofCase ConnectedOneofCase {
      get { return connectedOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConnectedOneof() {
      connectedOneofCase_ = ConnectedOneofOneofCase.None;
      connectedOneof_ = null;
    }

    private object hangupOneof_;
    /// <summary>Enum of possible cases for the "hangup_oneof" oneof.</summary>
    public enum HangupOneofOneofCase {
      None = 0,
      Hangup = 2,
    }
    private HangupOneofOneofCase hangupOneofCase_ = HangupOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangupOneofOneofCase HangupOneofCase {
      get { return hangupOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHangupOneof() {
      hangupOneofCase_ = HangupOneofOneofCase.None;
      hangupOneof_ = null;
    }

    private object videoStreamingStatusOneof_;
    /// <summary>Enum of possible cases for the "videoStreamingStatus_oneof" oneof.</summary>
    public enum VideoStreamingStatusOneofOneofCase {
      None = 0,
      VideoStreamingStatus = 3,
    }
    private VideoStreamingStatusOneofOneofCase videoStreamingStatusOneofCase_ = VideoStreamingStatusOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoStreamingStatusOneofOneofCase VideoStreamingStatusOneofCase {
      get { return videoStreamingStatusOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVideoStreamingStatusOneof() {
      videoStreamingStatusOneofCase_ = VideoStreamingStatusOneofOneofCase.None;
      videoStreamingStatusOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Connected, other.Connected)) return false;
      if (!object.Equals(Hangup, other.Hangup)) return false;
      if (!object.Equals(VideoStreamingStatus, other.VideoStreamingStatus)) return false;
      if (ConnectedOneofCase != other.ConnectedOneofCase) return false;
      if (HangupOneofCase != other.HangupOneofCase) return false;
      if (VideoStreamingStatusOneofCase != other.VideoStreamingStatusOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (connectedOneofCase_ == ConnectedOneofOneofCase.Connected) hash ^= Connected.GetHashCode();
      if (hangupOneofCase_ == HangupOneofOneofCase.Hangup) hash ^= Hangup.GetHashCode();
      if (videoStreamingStatusOneofCase_ == VideoStreamingStatusOneofOneofCase.VideoStreamingStatus) hash ^= VideoStreamingStatus.GetHashCode();
      hash ^= (int) connectedOneofCase_;
      hash ^= (int) hangupOneofCase_;
      hash ^= (int) videoStreamingStatusOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (connectedOneofCase_ == ConnectedOneofOneofCase.Connected) {
        output.WriteRawTag(10);
        output.WriteMessage(Connected);
      }
      if (hangupOneofCase_ == HangupOneofOneofCase.Hangup) {
        output.WriteRawTag(18);
        output.WriteMessage(Hangup);
      }
      if (videoStreamingStatusOneofCase_ == VideoStreamingStatusOneofOneofCase.VideoStreamingStatus) {
        output.WriteRawTag(26);
        output.WriteMessage(VideoStreamingStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (connectedOneofCase_ == ConnectedOneofOneofCase.Connected) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connected);
      }
      if (hangupOneofCase_ == HangupOneofOneofCase.Hangup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hangup);
      }
      if (videoStreamingStatusOneofCase_ == VideoStreamingStatusOneofOneofCase.VideoStreamingStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoStreamingStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Data other) {
      if (other == null) {
        return;
      }
      switch (other.ConnectedOneofCase) {
        case ConnectedOneofOneofCase.Connected:
          if (Connected == null) {
            Connected = new global::Signal_Windows.SignalWebRtc.Connected();
          }
          Connected.MergeFrom(other.Connected);
          break;
      }

      switch (other.HangupOneofCase) {
        case HangupOneofOneofCase.Hangup:
          if (Hangup == null) {
            Hangup = new global::Signal_Windows.SignalWebRtc.Hangup();
          }
          Hangup.MergeFrom(other.Hangup);
          break;
      }

      switch (other.VideoStreamingStatusOneofCase) {
        case VideoStreamingStatusOneofOneofCase.VideoStreamingStatus:
          if (VideoStreamingStatus == null) {
            VideoStreamingStatus = new global::Signal_Windows.SignalWebRtc.VideoStreamingStatus();
          }
          VideoStreamingStatus.MergeFrom(other.VideoStreamingStatus);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Signal_Windows.SignalWebRtc.Connected subBuilder = new global::Signal_Windows.SignalWebRtc.Connected();
            if (connectedOneofCase_ == ConnectedOneofOneofCase.Connected) {
              subBuilder.MergeFrom(Connected);
            }
            input.ReadMessage(subBuilder);
            Connected = subBuilder;
            break;
          }
          case 18: {
            global::Signal_Windows.SignalWebRtc.Hangup subBuilder = new global::Signal_Windows.SignalWebRtc.Hangup();
            if (hangupOneofCase_ == HangupOneofOneofCase.Hangup) {
              subBuilder.MergeFrom(Hangup);
            }
            input.ReadMessage(subBuilder);
            Hangup = subBuilder;
            break;
          }
          case 26: {
            global::Signal_Windows.SignalWebRtc.VideoStreamingStatus subBuilder = new global::Signal_Windows.SignalWebRtc.VideoStreamingStatus();
            if (videoStreamingStatusOneofCase_ == VideoStreamingStatusOneofOneofCase.VideoStreamingStatus) {
              subBuilder.MergeFrom(VideoStreamingStatus);
            }
            input.ReadMessage(subBuilder);
            VideoStreamingStatus = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
